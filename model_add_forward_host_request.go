/*
mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailcow

import (
	"encoding/json"
)

// checks if the AddForwardHostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddForwardHostRequest{}

// AddForwardHostRequest struct for AddForwardHostRequest
type AddForwardHostRequest struct {
	// 1 to enable spam filter, 0 to disable spam filter
	FilterSpam *float32 `json:"filter_spam,omitempty"`
	// contains the hostname you want to add
	Hostname *string `json:"hostname,omitempty"`
}

// NewAddForwardHostRequest instantiates a new AddForwardHostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddForwardHostRequest() *AddForwardHostRequest {
	this := AddForwardHostRequest{}
	return &this
}

// NewAddForwardHostRequestWithDefaults instantiates a new AddForwardHostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddForwardHostRequestWithDefaults() *AddForwardHostRequest {
	this := AddForwardHostRequest{}
	return &this
}

// GetFilterSpam returns the FilterSpam field value if set, zero value otherwise.
func (o *AddForwardHostRequest) GetFilterSpam() float32 {
	if o == nil || IsNil(o.FilterSpam) {
		var ret float32
		return ret
	}
	return *o.FilterSpam
}

// GetFilterSpamOk returns a tuple with the FilterSpam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddForwardHostRequest) GetFilterSpamOk() (*float32, bool) {
	if o == nil || IsNil(o.FilterSpam) {
		return nil, false
	}
	return o.FilterSpam, true
}

// HasFilterSpam returns a boolean if a field has been set.
func (o *AddForwardHostRequest) HasFilterSpam() bool {
	if o != nil && !IsNil(o.FilterSpam) {
		return true
	}

	return false
}

// SetFilterSpam gets a reference to the given float32 and assigns it to the FilterSpam field.
func (o *AddForwardHostRequest) SetFilterSpam(v float32) {
	o.FilterSpam = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *AddForwardHostRequest) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddForwardHostRequest) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *AddForwardHostRequest) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *AddForwardHostRequest) SetHostname(v string) {
	o.Hostname = &v
}

func (o AddForwardHostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddForwardHostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterSpam) {
		toSerialize["filter_spam"] = o.FilterSpam
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	return toSerialize, nil
}

type NullableAddForwardHostRequest struct {
	value *AddForwardHostRequest
	isSet bool
}

func (v NullableAddForwardHostRequest) Get() *AddForwardHostRequest {
	return v.value
}

func (v *NullableAddForwardHostRequest) Set(val *AddForwardHostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddForwardHostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddForwardHostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddForwardHostRequest(val *AddForwardHostRequest) *NullableAddForwardHostRequest {
	return &NullableAddForwardHostRequest{value: val, isSet: true}
}

func (v NullableAddForwardHostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddForwardHostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


