/*
mailcow API

Testing LogsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mailcow

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/shoopea/mailcow-go"
)

func Test_mailcow_LogsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LogsApiService GetACMELogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetACMELogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsApiService GetApiLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetApiLogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsApiService GetAutodiscoverLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetAutodiscoverLogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsApiService GetDovecotLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetDovecotLogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsApiService GetNetfilterLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetNetfilterLogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsApiService GetPostfixLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetPostfixLogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsApiService GetRatelimitLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetRatelimitLogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsApiService GetRspamdLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetRspamdLogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsApiService GetSOGoLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetSOGoLogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsApiService GetWatchdogLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var count float32

		httpRes, err := apiClient.LogsApi.GetWatchdogLogs(context.Background(), count).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
